type Query {
  repeatableLists(where: ListWhereArgs): [RepeatableList!]
  repeatableList(where: ListWhereArgs): RepeatableList
  repeatableListItems(where: ReapeatableListItemWhereArgs): [RepeatableListItem!]
  repeatableListItem(where: ReapeatableListItemWhereArgs): RepeatableListItem
}
type Mutation {
  upsertRepeatableListItem(listItem: RepeatableListItemMutationInput): RepeatableListItem
  deleteRepeatableListItem(id: ID!): ID!
  addRepeatableList(list: AddListInput!): RepeatableList!
  updateRepeatableList(list: UpdateListInput!): RepeatableList!
  deleteRepeatableList(id: ID!): ID!
  addRepetition(where: ListWhereArgs!): RepeatableList!
  addListItemToRepeatableList(input: AddListItemToRepeatableListMutationInput!): RepeatableList!
  removeListItemFromRepeatableList(input: AddListItemToRepeatableListMutationInput!): RepeatableList!
  completeRepeatedListItem(where: CompleteRepeatedListItemMutationInput!): RepeatedListItem!
}
schema {
  query: Query
  mutation: Mutation
}
type RepeatableList {
  id: ID!
  name: String!
  archived: Boolean
  listItems: [RepeatableListItem]
  slug: String!
  activeList: RepeatedList
  lists: [RepeatedList!]
}
type RepeatedList {
  completedTime: Int
  completed: Boolean!
  listItems: [RepeatedListItem!]
}
type RepeatedListItem {
  name: String!
  slug: String
  completedTime: Int
  completed: Boolean!
}
input AddListInput {
  name: String!,
  listItems: [ID!]
}
input UpdateListInput {
  id: ID
  name: String,
  slug: String,
  listItems: [ID!]
}
input ListWhereArgs {
  id: ID
  name: String
  slug: String
}
input AddListItemToRepeatableListMutationInput {
  slug: String!
  item: String!
}
input CompleteRepeatedListItemMutationInput {
  slug: String
  item: String
}
type RepeatableListItem {
  id: ID!
  name: String!
  slug: String
}
input RepeatableListItemMutationInput {
  id: ID
  name: String
  slug: String
}
input ReapeatableListItemWhereArgs {
  id: ID
  name: String
  slug: String
}
